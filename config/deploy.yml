# Name of your application. Used to uniquely configure containers.
service: cheeseformice

# Name of the container image.
image: ceicu/cheeseformice

# Deploy to these servers.
servers:
  web:
    hosts:
      - 78.47.203.46
    options:
      health-interval: 30s
      health-retries: 10
  job:
    hosts:
      - 78.47.203.46
    cmd: bundle exec good_job start
    options:
      health-cmd: bin/check
      health-interval: 30s
      health-retries: 1

deploy_timeout: 300

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  hosts:
    - cheeseformice.cc
    - www.cheeseformice.cc

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: ceicu

  # Always use an access token rather than real password when possible.
  password: <%= ENV.fetch("DOCKER_REGISTRY_PASSWORD") %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  clear:
    APP_HOST: cheeseformice.cc
    APP_PORT: 443
    RAILS_MASTER_KEY: <%= ENV.fetch("RAILS_MASTER_KEY") %>
    DOCKER_REGISTRY_PASSWORD: <%= ENV.fetch("DOCKER_REGISTRY_PASSWORD") %>
    POSTGRES_PASSWORD: <%= ENV.fetch("POSTGRES_PASSWORD") %>

    # Set number of cores available to the application on each server (default: 1).
    WEB_CONCURRENCY: auto

  #   # Match this to any external database server to configure Active Record correctly
  #   DB_HOST: 192.168.0.2

  #   # Log everything from Rails
  #   RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole --include-password"

# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "/mnt/HC_Volume_103686174/cheeseformice_storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64
  args:
    RUBY_VERSION: <%= File.read(".ruby-version").strip %>
    NODE_VERSION: <%= File.read(".nvmrc").strip %>
    YARN_VERSION: <%= JSON.parse(File.read("package.json"))["packageManager"].split("@").last %>

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: <%= ENV["RBENV_VERSION"] || ENV["rvm_ruby_string"] || "#{RUBY_ENGINE}-#{RUBY_ENGINE_VERSION}" %>
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  postgres:
    image: postgres:16
    host: 78.47.203.46
    port: "5432:5432"
    env:
      clear:
        POSTGRES_DB: cheeseformice
        POSTGRES_USER: root
        POSTGRES_PASSWORD: <%= ENV.fetch("POSTGRES_PASSWORD") %>
    directories:
      - "/mnt/HC_Volume_103686174/cheeseformice_storage:/var/lib/postgresql/data"
